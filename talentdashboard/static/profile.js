;(function() {
"use strict";

angular
    .module('profile', ['ngRoute', 'ui-notification']);

angular
    .module('profile')
    .controller('ProfileController', ProfileController);

function ProfileController(Employee, analytics, $location, $rootScope, $routeParams, $scope) {
    /* Since this page can be the root for some users let's make sure we capture the correct page */
    var location_url = $location.url().indexOf('/profile') < 0 ? '/profile' : $location.url();
    analytics.trackPage($scope, $location.absUrl(), location_url);
    var vm = this;
    vm.employee = null;
    vm.moreInfoCollapse = true;
    vm.filterCommentsByType = filterCommentsByType;
    vm.filterCommentsByView = filterCommentsByView;
    vm.filter = {type: null, view: 'me'};
    vm.filterCommentsDone = false;

    activate();

    function activate() {
        getEmployee();
    };

    function getEmployee() {
        Employee.get(
            {id: $routeParams.id},
            function (data) {
                vm.employee = data;
                vm.employee.hire_date = $rootScope.parseDate(vm.employee.hire_date);
            }
        );
    }

    function filterCommentsByType(type) {
        vm.filter.type = type;
        vm.filterCommentsDone = false;
        filterComments();
    }

    function filterCommentsByView(view) {
        vm.filter.view = view;
        vm.filterCommentsDone = false;
        filterComments();
    }

    function filterComments() {
        $scope.$broadcast('filterComments', vm.filter);
    }


    $scope.$on("filterCommentsDone", function(e, finished) {
        vm.filterCommentsDone = finished;
        $scope.$apply();
    })


}
ProfileController.$inject = ["Employee", "analytics", "$location", "$rootScope", "$routeParams", "$scope"];
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2ZpbGUubW9kdWxlLmpzIiwicHJvZmlsZS5jb250cm9sbGVyLmpzIiwicHJvZmlsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxDQUFBLENBQUEsV0FBQTtBQUNBOztBQ0RBO0tBQ0EsT0FBQSxXQUFBLENBQUEsV0FBQTs7QUFFQTtLQUNBLE9BQUE7S0FDQSxXQUFBLHFCQUFBOztBQUVBLFNBQUEsa0JBQUEsVUFBQSxXQUFBLFdBQUEsWUFBQSxjQUFBLFFBQUE7O0lBRUEsSUFBQSxlQUFBLFVBQUEsTUFBQSxRQUFBLGNBQUEsSUFBQSxhQUFBLFVBQUE7SUFDQSxVQUFBLFVBQUEsUUFBQSxVQUFBLFVBQUE7SUFDQSxJQUFBLEtBQUE7SUFDQSxHQUFBLFdBQUE7SUFDQSxHQUFBLG1CQUFBO0lBQ0EsR0FBQSx1QkFBQTtJQUNBLEdBQUEsdUJBQUE7SUFDQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLE1BQUEsTUFBQTtJQUNBLEdBQUEscUJBQUE7O0lBRUE7O0lBRUEsU0FBQSxXQUFBO1FBQ0E7S0FDQTs7SUFFQSxTQUFBLGNBQUE7UUFDQSxTQUFBO1lBQ0EsQ0FBQSxJQUFBLGFBQUE7WUFDQSxVQUFBLE1BQUE7Z0JBQ0EsR0FBQSxXQUFBO2dCQUNBLEdBQUEsU0FBQSxZQUFBLFdBQUEsVUFBQSxHQUFBLFNBQUE7Ozs7O0lBS0EsU0FBQSxxQkFBQSxNQUFBO1FBQ0EsR0FBQSxPQUFBLE9BQUE7UUFDQSxHQUFBLHFCQUFBO1FBQ0E7OztJQUdBLFNBQUEscUJBQUEsTUFBQTtRQUNBLEdBQUEsT0FBQSxPQUFBO1FBQ0EsR0FBQSxxQkFBQTtRQUNBOzs7SUFHQSxTQUFBLGlCQUFBO1FBQ0EsT0FBQSxXQUFBLGtCQUFBLEdBQUE7Ozs7SUFJQSxPQUFBLElBQUEsc0JBQUEsU0FBQSxHQUFBLFVBQUE7UUFDQSxHQUFBLHFCQUFBO1FBQ0EsT0FBQTs7Ozs7OztBQ1NBIiwiZmlsZSI6InByb2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgncHJvZmlsZScsIFsnbmdSb3V0ZScsICd1aS1ub3RpZmljYXRpb24nXSk7XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgncHJvZmlsZScpXG4gICAgLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDb250cm9sbGVyJywgUHJvZmlsZUNvbnRyb2xsZXIpO1xuXG5mdW5jdGlvbiBQcm9maWxlQ29udHJvbGxlcihFbXBsb3llZSwgYW5hbHl0aWNzLCAkbG9jYXRpb24sICRyb290U2NvcGUsICRyb3V0ZVBhcmFtcywgJHNjb3BlKSB7XG4gICAgLyogU2luY2UgdGhpcyBwYWdlIGNhbiBiZSB0aGUgcm9vdCBmb3Igc29tZSB1c2VycyBsZXQncyBtYWtlIHN1cmUgd2UgY2FwdHVyZSB0aGUgY29ycmVjdCBwYWdlICovXG4gICAgdmFyIGxvY2F0aW9uX3VybCA9ICRsb2NhdGlvbi51cmwoKS5pbmRleE9mKCcvcHJvZmlsZScpIDwgMCA/ICcvcHJvZmlsZScgOiAkbG9jYXRpb24udXJsKCk7XG4gICAgYW5hbHl0aWNzLnRyYWNrUGFnZSgkc2NvcGUsICRsb2NhdGlvbi5hYnNVcmwoKSwgbG9jYXRpb25fdXJsKTtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmVtcGxveWVlID0gbnVsbDtcbiAgICB2bS5tb3JlSW5mb0NvbGxhcHNlID0gdHJ1ZTtcbiAgICB2bS5maWx0ZXJDb21tZW50c0J5VHlwZSA9IGZpbHRlckNvbW1lbnRzQnlUeXBlO1xuICAgIHZtLmZpbHRlckNvbW1lbnRzQnlWaWV3ID0gZmlsdGVyQ29tbWVudHNCeVZpZXc7XG4gICAgdm0uZmlsdGVyID0ge3R5cGU6IG51bGwsIHZpZXc6ICdtZSd9O1xuICAgIHZtLmZpbHRlckNvbW1lbnRzRG9uZSA9IGZhbHNlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICBnZXRFbXBsb3llZSgpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRFbXBsb3llZSgpIHtcbiAgICAgICAgRW1wbG95ZWUuZ2V0KFxuICAgICAgICAgICAge2lkOiAkcm91dGVQYXJhbXMuaWR9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5lbXBsb3llZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgdm0uZW1wbG95ZWUuaGlyZV9kYXRlID0gJHJvb3RTY29wZS5wYXJzZURhdGUodm0uZW1wbG95ZWUuaGlyZV9kYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJDb21tZW50c0J5VHlwZSh0eXBlKSB7XG4gICAgICAgIHZtLmZpbHRlci50eXBlID0gdHlwZTtcbiAgICAgICAgdm0uZmlsdGVyQ29tbWVudHNEb25lID0gZmFsc2U7XG4gICAgICAgIGZpbHRlckNvbW1lbnRzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyQ29tbWVudHNCeVZpZXcodmlldykge1xuICAgICAgICB2bS5maWx0ZXIudmlldyA9IHZpZXc7XG4gICAgICAgIHZtLmZpbHRlckNvbW1lbnRzRG9uZSA9IGZhbHNlO1xuICAgICAgICBmaWx0ZXJDb21tZW50cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbHRlckNvbW1lbnRzKCkge1xuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnZmlsdGVyQ29tbWVudHMnLCB2bS5maWx0ZXIpO1xuICAgIH1cblxuXG4gICAgJHNjb3BlLiRvbihcImZpbHRlckNvbW1lbnRzRG9uZVwiLCBmdW5jdGlvbihlLCBmaW5pc2hlZCkge1xuICAgICAgICB2bS5maWx0ZXJDb21tZW50c0RvbmUgPSBmaW5pc2hlZDtcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH0pXG5cblxufSIsIjsoZnVuY3Rpb24oKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ3Byb2ZpbGUnLCBbJ25nUm91dGUnLCAndWktbm90aWZpY2F0aW9uJ10pO1xuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncHJvZmlsZScpXG4gICAgLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDb250cm9sbGVyJywgUHJvZmlsZUNvbnRyb2xsZXIpO1xuXG5mdW5jdGlvbiBQcm9maWxlQ29udHJvbGxlcihFbXBsb3llZSwgYW5hbHl0aWNzLCAkbG9jYXRpb24sICRyb290U2NvcGUsICRyb3V0ZVBhcmFtcywgJHNjb3BlKSB7XG4gICAgLyogU2luY2UgdGhpcyBwYWdlIGNhbiBiZSB0aGUgcm9vdCBmb3Igc29tZSB1c2VycyBsZXQncyBtYWtlIHN1cmUgd2UgY2FwdHVyZSB0aGUgY29ycmVjdCBwYWdlICovXG4gICAgdmFyIGxvY2F0aW9uX3VybCA9ICRsb2NhdGlvbi51cmwoKS5pbmRleE9mKCcvcHJvZmlsZScpIDwgMCA/ICcvcHJvZmlsZScgOiAkbG9jYXRpb24udXJsKCk7XG4gICAgYW5hbHl0aWNzLnRyYWNrUGFnZSgkc2NvcGUsICRsb2NhdGlvbi5hYnNVcmwoKSwgbG9jYXRpb25fdXJsKTtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZtLmVtcGxveWVlID0gbnVsbDtcbiAgICB2bS5tb3JlSW5mb0NvbGxhcHNlID0gdHJ1ZTtcbiAgICB2bS5maWx0ZXJDb21tZW50c0J5VHlwZSA9IGZpbHRlckNvbW1lbnRzQnlUeXBlO1xuICAgIHZtLmZpbHRlckNvbW1lbnRzQnlWaWV3ID0gZmlsdGVyQ29tbWVudHNCeVZpZXc7XG4gICAgdm0uZmlsdGVyID0ge3R5cGU6IG51bGwsIHZpZXc6ICdtZSd9O1xuICAgIHZtLmZpbHRlckNvbW1lbnRzRG9uZSA9IGZhbHNlO1xuXG4gICAgYWN0aXZhdGUoKTtcblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICBnZXRFbXBsb3llZSgpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRFbXBsb3llZSgpIHtcbiAgICAgICAgRW1wbG95ZWUuZ2V0KFxuICAgICAgICAgICAge2lkOiAkcm91dGVQYXJhbXMuaWR9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5lbXBsb3llZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgdm0uZW1wbG95ZWUuaGlyZV9kYXRlID0gJHJvb3RTY29wZS5wYXJzZURhdGUodm0uZW1wbG95ZWUuaGlyZV9kYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXJDb21tZW50c0J5VHlwZSh0eXBlKSB7XG4gICAgICAgIHZtLmZpbHRlci50eXBlID0gdHlwZTtcbiAgICAgICAgdm0uZmlsdGVyQ29tbWVudHNEb25lID0gZmFsc2U7XG4gICAgICAgIGZpbHRlckNvbW1lbnRzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsdGVyQ29tbWVudHNCeVZpZXcodmlldykge1xuICAgICAgICB2bS5maWx0ZXIudmlldyA9IHZpZXc7XG4gICAgICAgIHZtLmZpbHRlckNvbW1lbnRzRG9uZSA9IGZhbHNlO1xuICAgICAgICBmaWx0ZXJDb21tZW50cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbHRlckNvbW1lbnRzKCkge1xuICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnZmlsdGVyQ29tbWVudHMnLCB2bS5maWx0ZXIpO1xuICAgIH1cblxuXG4gICAgJHNjb3BlLiRvbihcImZpbHRlckNvbW1lbnRzRG9uZVwiLCBmdW5jdGlvbihlLCBmaW5pc2hlZCkge1xuICAgICAgICB2bS5maWx0ZXJDb21tZW50c0RvbmUgPSBmaW5pc2hlZDtcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH0pXG5cblxufVxufSgpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
